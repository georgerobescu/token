{
  "address": "0xc351628EB244ec633d5f21fBD6621e1a683B1181",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_r3l",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vestBegin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestShort",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestLong",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockPeriod",
          "type": "uint256"
        }
      ],
      "name": "lockPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unlockAmnt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Utils.Unlock",
          "name": "unlockData",
          "type": "tuple"
        }
      ],
      "name": "lockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVestAdmin",
          "type": "address"
        }
      ],
      "name": "vestAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shortAmnt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "longAmnt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Utils.Vest",
          "name": "vestData",
          "type": "tuple"
        }
      ],
      "name": "vestUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVestedRel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "r3l",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setVestAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shortAmnt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "longAmnt",
          "type": "uint256"
        }
      ],
      "name": "setVestedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeRel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferVestedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeRel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unstaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLockPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestBegin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vestData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shortAmnt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "longAmnt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdate",
              "type": "uint256"
            }
          ],
          "internalType": "struct Utils.Vest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestLong",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shortAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_longAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "vestTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x81df8f986c6774d155a8864e604f1449b305f1cd3f9f741049cdb7be04f52c44",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc351628EB244ec633d5f21fBD6621e1a683B1181",
    "transactionIndex": 0,
    "gasUsed": "2921846",
    "logsBloom": "0x
    "blockHash": "0x945a4abb8e3598462239d24a423fd11ec1e28f17d24bebb9891067a889722cee",
    "transactionHash": "0x81df8f986c6774d155a8864e604f1449b305f1cd3f9f741049cdb7be04f52c44",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13264853,
        "transactionHash": "0x81df8f986c6774d155a8864e604f1449b305f1cd3f9f741049cdb7be04f52c44",
        "address": "0xc351628EB244ec633d5f21fBD6621e1a683B1181",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x945a4abb8e3598462239d24a423fd11ec1e28f17d24bebb9891067a889722cee"
      }
    ],
    "blockNumber": 13264853,
    "cumulativeGasUsed": "2921846",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb6c4267C4877BB0D6b1685Cfd85b0FBe82F105ec",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    1633060800,
    1759204800,
    2137636800
  ],
  "solcInputHash": "3edf8e6df95d0ac5d841883bd29ecff1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_r3l\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestBegin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestShort\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestLong\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"lockPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Utils.Unlock\",\"name\":\"unlockData\",\"type\":\"tuple\"}],\"name\":\"lockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVestAdmin\",\"type\":\"address\"}],\"name\":\"vestAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shortAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Utils.Vest\",\"name\":\"vestData\",\"type\":\"tuple\"}],\"name\":\"vestUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestedRel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"r3l\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setVestAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shortAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longAmnt\",\"type\":\"uint256\"}],\"name\":\"setVestedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeRel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeRel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shortAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longAmnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Vest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shortAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_longAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"vestTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sRel.sol\":\"sRel\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        return _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x5ededcc80abc4797cdad3c0344c510a6aee060460f3fb8ec5983c4cfaeaef5e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interfaces/IsRel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.2;\\n\\nimport \\\"../libraries/Utils.sol\\\";\\n\\n// Relevant Governance Token\\ninterface IsRel {\\n  event lockUpdated(address indexed account, Utils.Unlock unlockData); // staking events\\n  event vestUpdated(address indexed account, address sender, Utils.Vest vestData); // vesting events\\n\\n  // governance events\\n  event lockPeriodUpdated(uint newLockPeriod);\\n  event vestAdminUpdated(address newVestAdmin);\\n\\n  // staking\\n  function unlock(uint256 amount) external;\\n  function resetLock() external;\\n  function stakeRel(uint256 amount) external;\\n  function unstakeRel(uint256 amount) external;\\n  // vesting\\n  function setVestedAmount(address account, uint256 amountShort, uint256 amountLong) external;\\n  function vestTokens(uint256 _shortAmount, uint256 _longAmount, bytes memory _sig) external;\\n  function claimVestedRel() external;\\n  function transferVestedTokens(address to) external;\\n  // governance \\n  function updateLockPeriod(uint newLockPeriod) external;\\n  function setVestAdmin(address newAdmin) external;\\n  // view\\n  function nonceOf(address account) external view returns (uint);\\n  function unstaked(address account) external view returns (uint);\\n  function staked(address account) external view returns (uint);\\n  function unlockTime(address account) external view returns (uint);\\n  function vested(address account) external view returns (uint);\\n  function vestData(address account) external view returns (Utils.Vest memory);\\n}\\n\",\"keccak256\":\"0xeac0117889732b8606a1b72a6400b86133bb26bc9904bd2b4e91bac553adbd9f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nlibrary Utils {\\n  using Utils for Unlock;\\n  using Utils for Vest;\\n\\n  struct Vest {\\n    uint shortAmnt;\\n    uint longAmnt;\\n    uint lastUpdate;\\n  }\\n\\n  struct Unlock {\\n    uint unlockAmnt;\\n    uint unlockTime;\\n  }\\n\\n  // note: we should be able to unlock all tokens (including vested tokens)\\n  function unlock(Unlock storage self, uint amount , uint lockTime) internal {\\n    self.unlockAmnt = amount;\\n    self.unlockTime = block.timestamp + lockTime;\\n  }\\n\\n  function useUnlocked(Unlock storage self, uint amount) internal {\\n    require(self.unlockTime <= block.timestamp, \\\"sRel Utils: tokens are not unlocked yet\\\");\\n    require(self.unlockAmnt >= amount, \\\"sRel Utils: tokens should be unlocked before transfer\\\");\\n\\n    self.unlockAmnt -= amount;  // update locked amount;\\n  }\\n\\n  function resetLock(Unlock storage self) internal {\\n    self.unlockAmnt = 0;\\n    self.unlockTime = 0;\\n  }\\n\\n\\n  function transferVestedTokens(Vest storage self, Vest storage vestTo) internal {\\n    require(self.vested() > 0, \\\"sRel Utils: nothing to transfer\\\");\\n    require(vestTo.vested() == 0, \\\"sRel Utils: cannot transfer to account with vested tokens\\\");\\n\\n    vestTo.shortAmnt = self.shortAmnt;\\n    vestTo.longAmnt = self.longAmnt;\\n    vestTo.lastUpdate = self.lastUpdate;\\n    \\n    // reset initial vest\\n    self.shortAmnt = 0;\\n    self.longAmnt = 0;\\n    self.lastUpdate = 0;\\n  }\\n\\n  function setVestedAmount(Vest storage self, uint shortAmnt, uint longAmnt) public {\\n    require(self.shortAmnt + self.longAmnt == 0, \\\"sRel Utils: this account already has vested tokens\\\");\\n    if (shortAmnt > 0)\\n      self.shortAmnt = shortAmnt;\\n\\n    if (longAmnt > 0)\\n      self.longAmnt = longAmnt;\\n    \\n    self.lastUpdate = 0;\\n  }\\n\\n  function vested(Vest storage self) internal view returns (uint) {\\n    return self.shortAmnt + self.longAmnt;\\n  }\\n\\n  // this method updates long and short vesting amounts\\n  function updateVestedAmount(Vest storage self, uint vestShort, uint vestLong, uint vestBegin) public returns (uint) {\\n    require(block.timestamp > vestBegin, \\\"sRel Utils: Vesting has't started yet\\\");\\n    uint amount = 0;\\n    uint shortAmnt = self.shortAmnt;\\n    uint longAmnt = self.longAmnt;\\n    uint last = self.lastUpdate < vestBegin ? vestBegin : self.lastUpdate;\\n    \\n    if(shortAmnt > 0 && last < vestShort) {\\n      uint currentTime = block.timestamp < vestShort ? block.timestamp : vestShort;\\n      uint sAmnt = shortAmnt * (currentTime - last) / (vestShort - last);\\n      self.shortAmnt -= sAmnt;\\n      amount += sAmnt;\\n    }\\n\\n    if(longAmnt > 0 && last < vestLong) {\\n      uint currentTime = block.timestamp < vestLong ? block.timestamp : vestLong;\\n      uint lAmnt = longAmnt * (currentTime - last) / (vestLong - last);\\n      self.longAmnt -= lAmnt;\\n      amount += lAmnt;\\n    }\\n\\n    require(amount > 0, \\\"sRel Utils: There are no vested tokens to claim\\\");\\n    self.lastUpdate = block.timestamp;\\n\\n    return amount;\\n  }\\n}\",\"keccak256\":\"0xbc06e286f98f10b807fd0645d63cd28dec9a2f53eb19546418ebbb9bd40c2c5b\",\"license\":\"MIT\"},\"contracts/sRel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interfaces/IsRel.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\n\\ncontract sRel is IsRel, ERC20, ERC20Permit, ERC20Votes, Ownable {\\n  using Utils for Utils.Vest;\\n  using Utils for Utils.Unlock;\\n\\n  address public immutable r3l; // RELEVANT TOKEN\\n\\n  address public vestAdmin; // role is responsible for sending tokens to vesting contract\\n\\n  uint public lockPeriod = 4 days; // how long it takes for staked tokens to become unlocked\\n\\n  uint public immutable vestBegin;  // start of all vesting periods\\n  uint public immutable vestShort; // short vesting period\\n  uint public immutable vestLong; // long vesting period\\n\\n  mapping(address => uint256) private vestNonce;\\n  mapping(address => Utils.Unlock) private unlocks;\\n  mapping(address => Utils.Vest) private vest;\\n\\n  constructor(address _r3l, address _vestAdmin, uint _vestBegin, uint _vestShort, uint _vestLong)\\n    ERC20(\\\"Staked REL\\\", \\\"sREL\\\")\\n    ERC20Permit(\\\"Staked REL\\\") \\n  {\\n    r3l = _r3l;\\n    vestBegin = _vestBegin;\\n    vestShort = _vestShort;\\n    vestLong = _vestLong;\\n    vestAdmin = _vestAdmin;\\n  }\\n\\n  // The functions below are overrides required by Solidity.\\n  function _afterTokenTransfer(address from, address to, uint256 amount)\\n      internal\\n      override(ERC20, ERC20Votes)\\n  {\\n      super._afterTokenTransfer(from, to, amount);\\n  }\\n\\n  function _mint(address to, uint256 amount)\\n      internal\\n      override(ERC20, ERC20Votes)\\n  {\\n      super._mint(to, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount)\\n      internal\\n      override(ERC20, ERC20Votes)\\n  {\\n      super._burn(account, amount);\\n  }\\n\\n  // only unlocked & unvested tokens can be transferred\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override(ERC20) {\\n      super._beforeTokenTransfer(from, to, amount);\\n\\n      // minting and transfers from contract are not subject to unlocks\\n      if(from == address(0) || from == address(this)) return;\\n    \\n      uint unvestedBalance = balanceOf(msg.sender) - vest[msg.sender].vested();\\n      require(amount <= unvestedBalance, \\\"sRel: you cannot transfer vested tokens\\\");\\n      \\n      unlocks[from].useUnlocked(amount); // only unlocked tokens can be transferred\\n      emit lockUpdated(from, unlocks[from]);\\n  }\\n\\n  // ---- STAKING METHODS ----\\n\\n  // unlock sRel - after lockPeriod tokens can be transferred or withdrawn\\n  function unlock(uint256 amount) external override(IsRel) {\\n    unlocks[msg.sender].unlock(amount, lockPeriod);\\n    emit lockUpdated(msg.sender, unlocks[msg.sender]);\\n  }\\n\\n   // re-lock tokens\\n  function resetLock() external override(IsRel) {\\n    unlocks[msg.sender].resetLock();\\n    emit lockUpdated(msg.sender, unlocks[msg.sender]);\\n  }\\n\\n  // deposit REL in exchange for sREL\\n  function stakeRel(uint256 amount) external override(IsRel) {\\n    IERC20(r3l).transferFrom(msg.sender, address(this), amount);\\n    _mint(msg.sender, amount);\\n  }\\n\\n  // withdraws all unlocked tokens\\n  function unstakeRel(uint256 amount) external override(IsRel) {\\n    _burn(msg.sender, amount);\\n    IERC20(r3l).transfer(msg.sender, amount);\\n  }\\n\\n  // ---- VESTING METHODS ----\\n\\n  // onwer can set amount of vested tokens manually\\n  // NOTE: REL must be sent to this contract before this method is called \\n  function setVestedAmount(address account, uint256 shortAmnt, uint256 longAmnt) onlyOwner external override(IsRel) {\\n    _setVestedAmount(account, shortAmnt, longAmnt);\\n  }\\n\\n  // Claim curation reward tokens (to be called by user from an app)\\n  function vestTokens(uint256 _shortAmount, uint256 _longAmount, bytes memory _sig) external override(IsRel) {\\n    bytes32 hash = keccak256(abi.encodePacked(_shortAmount, _longAmount, msg.sender, vestNonce[msg.sender]));\\n    hash = ECDSA.toEthSignedMessageHash(hash);\\n    address signer = ECDSA.recover(hash, _sig);\\n\\n    // check that the message was signed by a vest admin\\n    require(signer == vestAdmin, \\\"sRel: Claim not authorized\\\");\\n    \\n    vestNonce[msg.sender] += 1;\\n    _setVestedAmount(msg.sender, _shortAmount, _longAmount);\\n  }\\n\\n  // helper function that initializes vesting amounts\\n  // NOTE: REL must be sent to this contract before this method is called \\n  function _setVestedAmount(address account, uint256 shortAmnt, uint256 longAmnt) internal {\\n    vest[account].setVestedAmount(shortAmnt, longAmnt);\\n    require(totalSupply() + shortAmnt + longAmnt <= IERC20(r3l).balanceOf(address(this)), \\\"sRel: Not enought REL in contract\\\");\\n    _mint(account, shortAmnt + longAmnt);\\n    emit vestUpdated(account, msg.sender, vest[account]);\\n  }\\n\\n  // unvest and unlock tokens\\n  function claimVestedRel() external override(IsRel) {\\n    uint amount = vest[msg.sender].updateVestedAmount(vestShort, vestLong, vestBegin);\\n    unlocks[msg.sender].unlock(amount, lockPeriod);\\n    emit vestUpdated(msg.sender, msg.sender, vest[msg.sender]);\\n  }\\n\\n  // transfer all vested tokens to a new address\\n  function transferVestedTokens(address to) external override(IsRel) {\\n    uint amount = vest[msg.sender].vested();\\n    vest[msg.sender].transferVestedTokens(vest[to]);\\n    transfer(to, amount);\\n    emit vestUpdated(msg.sender, msg.sender, vest[msg.sender]);\\n    emit vestUpdated(to, msg.sender, vest[msg.sender]);\\n  }\\n  \\n  // ---- GOVERNANCE ----\\n\\n  function updateLockPeriod(uint newLockPeriod) external onlyOwner override(IsRel) {\\n    lockPeriod = newLockPeriod;\\n    emit lockPeriodUpdated(lockPeriod);\\n  }\\n\\n  function setVestAdmin(address newAdmin) external onlyOwner override(IsRel) {\\n    vestAdmin = newAdmin;\\n    emit vestAdminUpdated(vestAdmin);\\n  }\\n\\n  // ---- VIEW --------\\n  function nonceOf(address account) external view override(IsRel) returns (uint) {\\n    return vestNonce[account];\\n  }\\n\\n  function staked(address account) external view override(IsRel) returns (uint) {\\n    return balanceOf(account) - unlocks[account].unlockAmnt;\\n  }\\n\\n  function unstaked(address account) external view override(IsRel) returns (uint) {\\n    return unlocks[account].unlockAmnt;\\n  }\\n\\n  function unlockTime(address account) external view override(IsRel) returns (uint) {\\n    return unlocks[account].unlockTime;\\n  }\\n\\n  function vested(address account) external view override(IsRel) returns (uint) {\\n    return vest[account].vested();\\n  }\\n\\n  function vestData(address account) external view override(IsRel) returns (Utils.Vest memory) {\\n    return vest[account];\\n  }\\n}\\n\",\"keccak256\":\"0x568061aa8a7071b30dde138665af05570c95533e43f0231eecc2b79eaaa2ca5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96101205262054600600b553480156200003e57600080fd5b50604051620035dc380380620035dc833981016040819052620000619162000306565b6040518060400160405280600a81526020016914dd185ad9590814915360b21b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600a81526020016914dd185ad9590814915360b21b815250604051806040016040528060048152602001631cd4915360e21b8152508160039080519060200190620000f792919062000243565b5080516200010d90600490602084019062000243565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250620001a6905033620001f1565b60609490941b6001600160601b0319166101405261016091909152610180526101a091909152600a80546001600160a01b0319166001600160a01b0390921691909117905562000396565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620002519062000359565b90600052602060002090601f016020900481019282620002755760008555620002c0565b82601f106200029057805160ff1916838001178555620002c0565b82800160010185558215620002c0579182015b82811115620002c0578251825591602001919060010190620002a3565b50620002ce929150620002d2565b5090565b5b80821115620002ce5760008155600101620002d3565b80516001600160a01b03811681146200030157600080fd5b919050565b600080600080600060a086880312156200031f57600080fd5b6200032a86620002e9565b94506200033a60208701620002e9565b6040870151606088015160809098015196999198509695945092505050565b600181811c908216806200036e57607f821691505b602082108114156200039057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405160601c61016051610180516101a05161319d6200043f600039600081816104800152610cd90152600081816105840152610cb301526000818161067f0152610cff0152600081816102e001528181610a28015281816113370152611a700152600061141301526000611c1901526000611c6801526000611c4301526000611bc701526000611bf0015261319d6000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637ecebe0011610167578063a9059cbb116100ce578063dd62ed3e11610087578063dd62ed3e14610641578063e02c8fc51461067a578063ea8809a6146106a1578063ed2a2d64146106d6578063f1127ed8146106ff578063f2fde38b1461073c57600080fd5b8063a9059cbb146105b9578063c3cda520146105cc578063c50ef91e146105df578063c7c90bfb146105f2578063c9b493c81461061b578063d505accf1461062e57600080fd5b806395d89b411161012057806395d89b411461053e578063983ebeb51461054657806398807d84146105595780639ab24eb01461056c578063a09409601461057f578063a457c2d7146105a657600080fd5b80637ecebe00146104ce5780638adaaa84146104e15780638da5cb5b146104f45780638e539e8c146105055780638ec944741461051857806391db7b0d1461052b57600080fd5b80633fd8b02f1161020b57806370a08231116101c457806370a082311461042f5780637102b72814610458578063710745191461046b578063715018a61461047357806376831ae51461047b57806376b467b7146104a257600080fd5b80633fd8b02f146103a457806345459bcf146103ad578063587cde1e146103b55780635c19a95c146103e15780636198e339146103f45780636fcfff451461040757600080fd5b8063294d1bf01161025d578063294d1bf01461033f578063313ce567146103545780633644e515146103635780633664bf2d1461036b578063395093511461037e5780633a46b1a81461039157600080fd5b806306fdde031461029a578063095ea7b3146102b857806312287328146102db57806318160ddd1461031a57806323b872dd1461032c575b600080fd5b6102a261074f565b6040516102af9190612fdf565b60405180910390f35b6102cb6102c6366004612da4565b6107e1565b60405190151581526020016102af565b6103027f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102af565b6002545b6040519081526020016102af565b6102cb61033a366004612cfe565b6107f7565b61035261034d366004612eed565b6108a6565b005b604051601281526020016102af565b61031e6109f7565b610352610379366004612ebb565b610a06565b6102cb61038c366004612da4565b610aba565b61031e61039f366004612da4565b610af6565b61031e600b5481565b610352610b70565b6103026103c3366004612cb0565b6001600160a01b039081166000908152600660205260409020541690565b6103526103ef366004612cb0565b610bc4565b610352610402366004612ebb565b610bce565b61041a610415366004612cb0565b610c44565b60405163ffffffff90911681526020016102af565b61031e61043d366004612cb0565b6001600160a01b031660009081526020819052604090205490565b61031e610466366004612cb0565b610c6c565b610352610c8d565b610352610de2565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b61031e6104b0366004612cb0565b6001600160a01b03166000908152600d602052604090206001015490565b61031e6104dc366004612cb0565b610e18565b6103526104ef366004612cb0565b610e36565b6009546001600160a01b0316610302565b61031e610513366004612ebb565b610eb5565b610352610526366004612cb0565b610f11565b610352610539366004612ebb565b610fd9565b6102a2611038565b610352610554366004612dce565b611047565b61031e610567366004612cb0565b611081565b61031e61057a366004612cb0565b6110ae565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb6105b4366004612da4565b611135565b6102cb6105c7366004612da4565b6111ce565b6103526105da366004612e01565b6111db565b600a54610302906001600160a01b031681565b61031e610600366004612cb0565b6001600160a01b03166000908152600d602052604090205490565b610352610629366004612ebb565b611311565b61035261063c366004612d3a565b6113bf565b61031e61064f366004612ccb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b6106b46106af366004612cb0565b611523565b60408051825181526020808401519082015291810151908201526060016102af565b61031e6106e4366004612cb0565b6001600160a01b03166000908152600c602052604090205490565b61071261070d366004612e59565b611589565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016102af565b61035261074a366004612cb0565b61160d565b60606003805461075e906130ba565b80601f016020809104026020016040519081016040528092919081815260200182805461078a906130ba565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050905090565b60006107ee3384846116a5565b50600192915050565b60006108048484846117c9565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561088e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61089b85338584036116a5565b506001949350505050565b336000818152600c6020908152604080832054905192936108f493889388939101938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051808303601f1901815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000082850152603c8085019190915282518085039091018152605c90930190915281519101209050600061095f82846119ae565b600a549091506001600160a01b038083169116146109bf5760405162461bcd60e51b815260206004820152601a60248201527f7352656c3a20436c61696d206e6f7420617574686f72697a65640000000000006044820152606401610885565b336000908152600c602052604081208054600192906109df908490613069565b909155506109f090503386866119d2565b5050505050565b6000610a01611bc3565b905090565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610a7457600080fd5b505af1158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190612e99565b50610ab73382611cb6565b50565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916107ee918590610af1908690613069565b6116a5565b6000438210610b475760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610885565b6001600160a01b0383166000908152600760205260409020610b699083611cc0565b9392505050565b336000818152600d602090815260408083208381556001018390558051838152918201929092527f53a06858e4b0bb751491f078084a1a381e3fb6d6e9dd983c266e2d68e33bd79a910160405180910390a2565b610ab73382611d7d565b600b54336000908152600d60205260409020610beb918390611df6565b336000818152600d60205260409081902090517f53a06858e4b0bb751491f078084a1a381e3fb6d6e9dd983c266e2d68e33bd79a91610c399181548152600190910154602082015260400190565b60405180910390a250565b6001600160a01b038116600090815260076020526040812054610c6690611e10565b92915050565b6001600160a01b0381166000908152600e60205260408120610c6690611e79565b336000908152600e60205260408082209051634cbb32f560e11b815260048101919091527f000000000000000000000000000000000000000000000000000000000000000060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f00000000000000000000000000000000000000000000000000000000000000006064820152737bc06c482DEAd17c0e297aFbC32f6e63d38466509063997665ea9060840160206040518083038186803b158015610d5a57600080fd5b505af4158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190612ed4565b600b54336000908152600d60205260409020919250610db391908390611df6565b336000818152600e602052604090819020905160008051602061314883398151915291610c3991849190612fb1565b6009546001600160a01b03163314610e0c5760405162461bcd60e51b815260040161088590613034565b610e166000611e8c565b565b6001600160a01b038116600090815260056020526040812054610c66565b6009546001600160a01b03163314610e605760405162461bcd60e51b815260040161088590613034565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f8961078521e826adb5caac59fa1f47e24f2059266ab5fe7c7fbf9b2ccd5a21e3906020015b60405180910390a150565b6000438210610f065760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610885565b610c66600883611cc0565b336000908152600e60205260408120610f2990611e79565b6001600160a01b0383166000908152600e60205260408082203383529120919250610f549190611ede565b610f5e82826111ce565b50336000818152600e602052604090819020905160008051602061314883398151915291610f8e91849190612fb1565b60405180910390a2336000818152600e60205260409081902090516001600160a01b0385169260008051602061314883398151915292610fcd92612fb1565b60405180910390a25050565b6009546001600160a01b031633146110035760405162461bcd60e51b815260040161088590613034565b600b8190556040518181527fe8bf8dfb4abe1420b183a0e83ced724064b765215e282a7a58dff3c1fef5e3f190602001610eaa565b60606004805461075e906130ba565b6009546001600160a01b031633146110715760405162461bcd60e51b815260040161088590613034565b61107c8383836119d2565b505050565b6001600160a01b0381166000908152600d602090815260408083205491839052822054610c6691906130a3565b6001600160a01b0381166000908152600760205260408120548015611122576001600160a01b03831660009081526007602052604090206110f06001836130a3565b815481106111005761110061311b565b60009182526020909120015464010000000090046001600160e01b0316611125565b60005b6001600160e01b03169392505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156111b75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610885565b6111c433858584036116a5565b5060019392505050565b60006107ee3384846117c9565b8342111561122b5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610885565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906112a59061129d9060a00160405160208183030381529060405280519060200120611fdc565b85858561202a565b90506112b081612052565b86146112fe5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610885565b6113088188611d7d565b50505050505050565b61131b338261207a565b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561138357600080fd5b505af1158015611397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bb9190612e99565b5050565b8342111561140f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610885565b60007f000000000000000000000000000000000000000000000000000000000000000088888861143e8c612052565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061149982611fdc565b905060006114a98287878761202a565b9050896001600160a01b0316816001600160a01b03161461150c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610885565b6115178a8a8a6116a5565b50505050505050505050565b61154760405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600e6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff84169081106115cd576115cd61311b565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6009546001600160a01b031633146116375760405162461bcd60e51b815260040161088590613034565b6001600160a01b03811661169c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610885565b610ab781611e8c565b6001600160a01b0383166117075760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610885565b6001600160a01b0382166117685760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610885565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661182d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610885565b6001600160a01b03821661188f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610885565b61189a838383612084565b6001600160a01b038316600090815260208190526040902054818110156119125760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610885565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611949908490613069565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161199591815260200190565b60405180910390a36119a88484846121c7565b50505050565b60008060006119bd85856121d2565b915091506119ca81612242565b509392505050565b6001600160a01b0383166000908152600e6020526040908190209051632cc0060560e21b815260048101919091526024810183905260448101829052737bc06c482DEAd17c0e297aFbC32f6e63d38466509063b30018149060640160006040518083038186803b158015611a4557600080fd5b505af4158015611a59573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b158015611abc57600080fd5b505afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af49190612ed4565b8183611aff60025490565b611b099190613069565b611b139190613069565b1115611b6b5760405162461bcd60e51b815260206004820152602160248201527f7352656c3a204e6f7420656e6f756768742052454c20696e20636f6e747261636044820152601d60fa1b6064820152608401610885565b611b7e83611b798385613069565b611cb6565b6001600160a01b0383166000818152600e602052604090819020905160008051602061314883398151915291611bb691339190612fb1565b60405180910390a2505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611c1257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6113bb82826123fd565b8154600090815b81811015611d24576000611cdb8284612487565b905084868281548110611cf057611cf061311b565b60009182526020909120015463ffffffff161115611d1057809250611d1e565b611d1b816001613069565b91505b50611cc7565b8115611d685784611d366001846130a3565b81548110611d4657611d4661311b565b60009182526020909120015464010000000090046001600160e01b0316611d6b565b60005b6001600160e01b031695945050505050565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46119a88284836124a2565b818355611e038142613069565b8360010181905550505050565b600063ffffffff821115611e755760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610885565b5090565b60018101548154600091610c6691613069565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611ee983611e79565b11611f365760405162461bcd60e51b815260206004820152601f60248201527f7352656c205574696c733a206e6f7468696e6720746f207472616e73666572006044820152606401610885565b611f3f81611e79565b15611fb25760405162461bcd60e51b815260206004820152603960248201527f7352656c205574696c733a2063616e6e6f74207472616e7366657220746f206160448201527f63636f756e7420776974682076657374656420746f6b656e73000000000000006064820152608401610885565b81548155600180830180549183019190915560028084018054919093015560009283905582905555565b6000610c66611fe9611bc3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061203b878787876125df565b9150915061204881612242565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6113bb82826126cc565b6001600160a01b03831615806120a257506001600160a01b03831630145b156120ac57505050565b336000908152600e602052604081206120c490611e79565b336000908152602081905260409020546120de91906130a3565b9050808211156121405760405162461bcd60e51b815260206004820152602760248201527f7352656c3a20796f752063616e6e6f74207472616e736665722076657374656460448201526620746f6b656e7360c81b6064820152608401610885565b6001600160a01b0384166000908152600d6020526040902061216290836126e4565b6001600160a01b0384166000818152600d60205260409081902090517f53a06858e4b0bb751491f078084a1a381e3fb6d6e9dd983c266e2d68e33bd79a916121b99181548152600190910154602082015260400190565b60405180910390a250505050565b61107c8383836127d4565b6000808251604114156122095760208301516040840151606085015160001a6121fd878285856125df565b9450945050505061223b565b8251604014156122335760208301516040840151612228868383612806565b93509350505061223b565b506000905060025b9250929050565b600081600481111561225657612256613105565b141561225f5750565b600181600481111561227357612273613105565b14156122c15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610885565b60028160048111156122d5576122d5613105565b14156123235760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610885565b600381600481111561233757612337613105565b14156123905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610885565b60048160048111156123a4576123a4613105565b1415610ab75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610885565b6124078282612835565b6002546001600160e01b0310156124795760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401610885565b6119a8600861292883612934565b60006124966002848418613081565b610b6990848416613069565b816001600160a01b0316836001600160a01b0316141580156124c45750600081115b1561107c576001600160a01b03831615612552576001600160a01b038316600090815260076020526040812081906124ff90612aad85612934565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612547929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161561107c576001600160a01b038216600090815260076020526040812081906125889061292885612934565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125d0929190918252602082015260400190565b60405180910390a25050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561261657506000905060036126c3565b8460ff16601b1415801561262e57508460ff16601c14155b1561263f57506000905060046126c3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612693573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126bc576000600192509250506126c3565b9150600090505b94509492505050565b6126d68282612ab9565b6119a86008612aad83612934565b42826001015411156127485760405162461bcd60e51b815260206004820152602760248201527f7352656c205574696c733a20746f6b656e7320617265206e6f7420756e6c6f636044820152661ad959081e595d60ca1b6064820152608401610885565b81548111156127b75760405162461bcd60e51b815260206004820152603560248201527f7352656c205574696c733a20746f6b656e732073686f756c6420626520756e6c60448201527437b1b5b2b2103132b337b932903a3930b739b332b960591b6064820152608401610885565b808260000160008282546127cb91906130a3565b90915550505050565b6001600160a01b0383811660009081526006602052604080822054858416835291205461107c929182169116836124a2565b6000806001600160ff1b03831660ff84901c601b01612827878288856125df565b935093505050935093915050565b6001600160a01b03821661288b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610885565b61289760008383612084565b80600260008282546128a99190613069565b90915550506001600160a01b038216600090815260208190526040812080548392906128d6908490613069565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36113bb600083836121c7565b6000610b698284613069565b82546000908190801561297f578561294d6001836130a3565b8154811061295d5761295d61311b565b60009182526020909120015464010000000090046001600160e01b0316612982565b60005b6001600160e01b0316925061299b83858763ffffffff16565b91506000811180156129d9575043866129b56001846130a3565b815481106129c5576129c561311b565b60009182526020909120015463ffffffff16145b15612a39576129e782612c1a565b866129f36001846130a3565b81548110612a0357612a0361311b565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b03160217905550612aa4565b856040518060400160405280612a4e43611e10565b63ffffffff168152602001612a6285612c1a565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b6000610b6982846130a3565b6001600160a01b038216612b195760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610885565b612b2582600083612084565b6001600160a01b03821660009081526020819052604090205481811015612b995760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610885565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612bc89084906130a3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361107c836000846121c7565b60006001600160e01b03821115611e755760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610885565b80356001600160a01b0381168114612c9a57600080fd5b919050565b803560ff81168114612c9a57600080fd5b600060208284031215612cc257600080fd5b610b6982612c83565b60008060408385031215612cde57600080fd5b612ce783612c83565b9150612cf560208401612c83565b90509250929050565b600080600060608486031215612d1357600080fd5b612d1c84612c83565b9250612d2a60208501612c83565b9150604084013590509250925092565b600080600080600080600060e0888a031215612d5557600080fd5b612d5e88612c83565b9650612d6c60208901612c83565b95506040880135945060608801359350612d8860808901612c9f565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612db757600080fd5b612dc083612c83565b946020939093013593505050565b600080600060608486031215612de357600080fd5b612dec84612c83565b95602085013595506040909401359392505050565b60008060008060008060c08789031215612e1a57600080fd5b612e2387612c83565b95506020870135945060408701359350612e3f60608801612c9f565b92506080870135915060a087013590509295509295509295565b60008060408385031215612e6c57600080fd5b612e7583612c83565b9150602083013563ffffffff81168114612e8e57600080fd5b809150509250929050565b600060208284031215612eab57600080fd5b81518015158114610b6957600080fd5b600060208284031215612ecd57600080fd5b5035919050565b600060208284031215612ee657600080fd5b5051919050565b600080600060608486031215612f0257600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115612f2857600080fd5b818601915086601f830112612f3c57600080fd5b813581811115612f4e57612f4e613131565b604051601f8201601f19908116603f01168101908382118183101715612f7657612f76613131565b81604052828152896020848701011115612f8f57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6001600160a01b03929092168252805460208301526001810154604083015260020154606082015260800190565b600060208083528351808285015260005b8181101561300c57858101830151858201604001528201612ff0565b8181111561301e576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561307c5761307c6130ef565b500190565b60008261309e57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156130b5576130b56130ef565b500390565b600181811c908216806130ce57607f821691505b6020821081141561207457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe52cd33bfcaef1b1998163985f60162407a7ba572f611529d9730d1f7c3825176a264697066735822122062add87476d1eaf6c97abfa0adb8f2a81c52cd76a46805fb8dd10c2dd762c8cb64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80637ecebe0011610167578063a9059cbb116100ce578063dd62ed3e11610087578063dd62ed3e14610641578063e02c8fc51461067a578063ea8809a6146106a1578063ed2a2d64146106d6578063f1127ed8146106ff578063f2fde38b1461073c57600080fd5b8063a9059cbb146105b9578063c3cda520146105cc578063c50ef91e146105df578063c7c90bfb146105f2578063c9b493c81461061b578063d505accf1461062e57600080fd5b806395d89b411161012057806395d89b411461053e578063983ebeb51461054657806398807d84146105595780639ab24eb01461056c578063a09409601461057f578063a457c2d7146105a657600080fd5b80637ecebe00146104ce5780638adaaa84146104e15780638da5cb5b146104f45780638e539e8c146105055780638ec944741461051857806391db7b0d1461052b57600080fd5b80633fd8b02f1161020b57806370a08231116101c457806370a082311461042f5780637102b72814610458578063710745191461046b578063715018a61461047357806376831ae51461047b57806376b467b7146104a257600080fd5b80633fd8b02f146103a457806345459bcf146103ad578063587cde1e146103b55780635c19a95c146103e15780636198e339146103f45780636fcfff451461040757600080fd5b8063294d1bf01161025d578063294d1bf01461033f578063313ce567146103545780633644e515146103635780633664bf2d1461036b578063395093511461037e5780633a46b1a81461039157600080fd5b806306fdde031461029a578063095ea7b3146102b857806312287328146102db57806318160ddd1461031a57806323b872dd1461032c575b600080fd5b6102a261074f565b6040516102af9190612fdf565b60405180910390f35b6102cb6102c6366004612da4565b6107e1565b60405190151581526020016102af565b6103027f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102af565b6002545b6040519081526020016102af565b6102cb61033a366004612cfe565b6107f7565b61035261034d366004612eed565b6108a6565b005b604051601281526020016102af565b61031e6109f7565b610352610379366004612ebb565b610a06565b6102cb61038c366004612da4565b610aba565b61031e61039f366004612da4565b610af6565b61031e600b5481565b610352610b70565b6103026103c3366004612cb0565b6001600160a01b039081166000908152600660205260409020541690565b6103526103ef366004612cb0565b610bc4565b610352610402366004612ebb565b610bce565b61041a610415366004612cb0565b610c44565b60405163ffffffff90911681526020016102af565b61031e61043d366004612cb0565b6001600160a01b031660009081526020819052604090205490565b61031e610466366004612cb0565b610c6c565b610352610c8d565b610352610de2565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b61031e6104b0366004612cb0565b6001600160a01b03166000908152600d602052604090206001015490565b61031e6104dc366004612cb0565b610e18565b6103526104ef366004612cb0565b610e36565b6009546001600160a01b0316610302565b61031e610513366004612ebb565b610eb5565b610352610526366004612cb0565b610f11565b610352610539366004612ebb565b610fd9565b6102a2611038565b610352610554366004612dce565b611047565b61031e610567366004612cb0565b611081565b61031e61057a366004612cb0565b6110ae565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb6105b4366004612da4565b611135565b6102cb6105c7366004612da4565b6111ce565b6103526105da366004612e01565b6111db565b600a54610302906001600160a01b031681565b61031e610600366004612cb0565b6001600160a01b03166000908152600d602052604090205490565b610352610629366004612ebb565b611311565b61035261063c366004612d3a565b6113bf565b61031e61064f366004612ccb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61031e7f000000000000000000000000000000000000000000000000000000000000000081565b6106b46106af366004612cb0565b611523565b60408051825181526020808401519082015291810151908201526060016102af565b61031e6106e4366004612cb0565b6001600160a01b03166000908152600c602052604090205490565b61071261070d366004612e59565b611589565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016102af565b61035261074a366004612cb0565b61160d565b60606003805461075e906130ba565b80601f016020809104026020016040519081016040528092919081815260200182805461078a906130ba565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050905090565b60006107ee3384846116a5565b50600192915050565b60006108048484846117c9565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561088e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61089b85338584036116a5565b506001949350505050565b336000818152600c6020908152604080832054905192936108f493889388939101938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051808303601f1901815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000082850152603c8085019190915282518085039091018152605c90930190915281519101209050600061095f82846119ae565b600a549091506001600160a01b038083169116146109bf5760405162461bcd60e51b815260206004820152601a60248201527f7352656c3a20436c61696d206e6f7420617574686f72697a65640000000000006044820152606401610885565b336000908152600c602052604081208054600192906109df908490613069565b909155506109f090503386866119d2565b5050505050565b6000610a01611bc3565b905090565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610a7457600080fd5b505af1158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190612e99565b50610ab73382611cb6565b50565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916107ee918590610af1908690613069565b6116a5565b6000438210610b475760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610885565b6001600160a01b0383166000908152600760205260409020610b699083611cc0565b9392505050565b336000818152600d602090815260408083208381556001018390558051838152918201929092527f53a06858e4b0bb751491f078084a1a381e3fb6d6e9dd983c266e2d68e33bd79a910160405180910390a2565b610ab73382611d7d565b600b54336000908152600d60205260409020610beb918390611df6565b336000818152600d60205260409081902090517f53a06858e4b0bb751491f078084a1a381e3fb6d6e9dd983c266e2d68e33bd79a91610c399181548152600190910154602082015260400190565b60405180910390a250565b6001600160a01b038116600090815260076020526040812054610c6690611e10565b92915050565b6001600160a01b0381166000908152600e60205260408120610c6690611e79565b336000908152600e60205260408082209051634cbb32f560e11b815260048101919091527f000000000000000000000000000000000000000000000000000000000000000060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f0000000000000000000000000000000000000000000000000000000000000000606482015273__$b4ae538d42a0e0bb8330684d08e51a40b4$__9063997665ea9060840160206040518083038186803b158015610d5a57600080fd5b505af4158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190612ed4565b600b54336000908152600d60205260409020919250610db391908390611df6565b336000818152600e602052604090819020905160008051602061314883398151915291610c3991849190612fb1565b6009546001600160a01b03163314610e0c5760405162461bcd60e51b815260040161088590613034565b610e166000611e8c565b565b6001600160a01b038116600090815260056020526040812054610c66565b6009546001600160a01b03163314610e605760405162461bcd60e51b815260040161088590613034565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f8961078521e826adb5caac59fa1f47e24f2059266ab5fe7c7fbf9b2ccd5a21e3906020015b60405180910390a150565b6000438210610f065760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610885565b610c66600883611cc0565b336000908152600e60205260408120610f2990611e79565b6001600160a01b0383166000908152600e60205260408082203383529120919250610f549190611ede565b610f5e82826111ce565b50336000818152600e602052604090819020905160008051602061314883398151915291610f8e91849190612fb1565b60405180910390a2336000818152600e60205260409081902090516001600160a01b0385169260008051602061314883398151915292610fcd92612fb1565b60405180910390a25050565b6009546001600160a01b031633146110035760405162461bcd60e51b815260040161088590613034565b600b8190556040518181527fe8bf8dfb4abe1420b183a0e83ced724064b765215e282a7a58dff3c1fef5e3f190602001610eaa565b60606004805461075e906130ba565b6009546001600160a01b031633146110715760405162461bcd60e51b815260040161088590613034565b61107c8383836119d2565b505050565b6001600160a01b0381166000908152600d602090815260408083205491839052822054610c6691906130a3565b6001600160a01b0381166000908152600760205260408120548015611122576001600160a01b03831660009081526007602052604090206110f06001836130a3565b815481106111005761110061311b565b60009182526020909120015464010000000090046001600160e01b0316611125565b60005b6001600160e01b03169392505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156111b75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610885565b6111c433858584036116a5565b5060019392505050565b60006107ee3384846117c9565b8342111561122b5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610885565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906112a59061129d9060a00160405160208183030381529060405280519060200120611fdc565b85858561202a565b90506112b081612052565b86146112fe5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610885565b6113088188611d7d565b50505050505050565b61131b338261207a565b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561138357600080fd5b505af1158015611397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bb9190612e99565b5050565b8342111561140f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610885565b60007f000000000000000000000000000000000000000000000000000000000000000088888861143e8c612052565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061149982611fdc565b905060006114a98287878761202a565b9050896001600160a01b0316816001600160a01b03161461150c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610885565b6115178a8a8a6116a5565b50505050505050505050565b61154760405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600e6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff84169081106115cd576115cd61311b565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6009546001600160a01b031633146116375760405162461bcd60e51b815260040161088590613034565b6001600160a01b03811661169c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610885565b610ab781611e8c565b6001600160a01b0383166117075760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610885565b6001600160a01b0382166117685760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610885565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661182d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610885565b6001600160a01b03821661188f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610885565b61189a838383612084565b6001600160a01b038316600090815260208190526040902054818110156119125760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610885565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611949908490613069565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161199591815260200190565b60405180910390a36119a88484846121c7565b50505050565b60008060006119bd85856121d2565b915091506119ca81612242565b509392505050565b6001600160a01b0383166000908152600e6020526040908190209051632cc0060560e21b81526004810191909152602481018390526044810182905273__$b4ae538d42a0e0bb8330684d08e51a40b4$__9063b30018149060640160006040518083038186803b158015611a4557600080fd5b505af4158015611a59573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b158015611abc57600080fd5b505afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af49190612ed4565b8183611aff60025490565b611b099190613069565b611b139190613069565b1115611b6b5760405162461bcd60e51b815260206004820152602160248201527f7352656c3a204e6f7420656e6f756768742052454c20696e20636f6e747261636044820152601d60fa1b6064820152608401610885565b611b7e83611b798385613069565b611cb6565b6001600160a01b0383166000818152600e602052604090819020905160008051602061314883398151915291611bb691339190612fb1565b60405180910390a2505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611c1257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6113bb82826123fd565b8154600090815b81811015611d24576000611cdb8284612487565b905084868281548110611cf057611cf061311b565b60009182526020909120015463ffffffff161115611d1057809250611d1e565b611d1b816001613069565b91505b50611cc7565b8115611d685784611d366001846130a3565b81548110611d4657611d4661311b565b60009182526020909120015464010000000090046001600160e01b0316611d6b565b60005b6001600160e01b031695945050505050565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46119a88284836124a2565b818355611e038142613069565b8360010181905550505050565b600063ffffffff821115611e755760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610885565b5090565b60018101548154600091610c6691613069565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611ee983611e79565b11611f365760405162461bcd60e51b815260206004820152601f60248201527f7352656c205574696c733a206e6f7468696e6720746f207472616e73666572006044820152606401610885565b611f3f81611e79565b15611fb25760405162461bcd60e51b815260206004820152603960248201527f7352656c205574696c733a2063616e6e6f74207472616e7366657220746f206160448201527f63636f756e7420776974682076657374656420746f6b656e73000000000000006064820152608401610885565b81548155600180830180549183019190915560028084018054919093015560009283905582905555565b6000610c66611fe9611bc3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061203b878787876125df565b9150915061204881612242565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6113bb82826126cc565b6001600160a01b03831615806120a257506001600160a01b03831630145b156120ac57505050565b336000908152600e602052604081206120c490611e79565b336000908152602081905260409020546120de91906130a3565b9050808211156121405760405162461bcd60e51b815260206004820152602760248201527f7352656c3a20796f752063616e6e6f74207472616e736665722076657374656460448201526620746f6b656e7360c81b6064820152608401610885565b6001600160a01b0384166000908152600d6020526040902061216290836126e4565b6001600160a01b0384166000818152600d60205260409081902090517f53a06858e4b0bb751491f078084a1a381e3fb6d6e9dd983c266e2d68e33bd79a916121b99181548152600190910154602082015260400190565b60405180910390a250505050565b61107c8383836127d4565b6000808251604114156122095760208301516040840151606085015160001a6121fd878285856125df565b9450945050505061223b565b8251604014156122335760208301516040840151612228868383612806565b93509350505061223b565b506000905060025b9250929050565b600081600481111561225657612256613105565b141561225f5750565b600181600481111561227357612273613105565b14156122c15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610885565b60028160048111156122d5576122d5613105565b14156123235760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610885565b600381600481111561233757612337613105565b14156123905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610885565b60048160048111156123a4576123a4613105565b1415610ab75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610885565b6124078282612835565b6002546001600160e01b0310156124795760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401610885565b6119a8600861292883612934565b60006124966002848418613081565b610b6990848416613069565b816001600160a01b0316836001600160a01b0316141580156124c45750600081115b1561107c576001600160a01b03831615612552576001600160a01b038316600090815260076020526040812081906124ff90612aad85612934565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612547929190918252602082015260400190565b60405180910390a250505b6001600160a01b0382161561107c576001600160a01b038216600090815260076020526040812081906125889061292885612934565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125d0929190918252602082015260400190565b60405180910390a25050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561261657506000905060036126c3565b8460ff16601b1415801561262e57508460ff16601c14155b1561263f57506000905060046126c3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612693573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126bc576000600192509250506126c3565b9150600090505b94509492505050565b6126d68282612ab9565b6119a86008612aad83612934565b42826001015411156127485760405162461bcd60e51b815260206004820152602760248201527f7352656c205574696c733a20746f6b656e7320617265206e6f7420756e6c6f636044820152661ad959081e595d60ca1b6064820152608401610885565b81548111156127b75760405162461bcd60e51b815260206004820152603560248201527f7352656c205574696c733a20746f6b656e732073686f756c6420626520756e6c60448201527437b1b5b2b2103132b337b932903a3930b739b332b960591b6064820152608401610885565b808260000160008282546127cb91906130a3565b90915550505050565b6001600160a01b0383811660009081526006602052604080822054858416835291205461107c929182169116836124a2565b6000806001600160ff1b03831660ff84901c601b01612827878288856125df565b935093505050935093915050565b6001600160a01b03821661288b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610885565b61289760008383612084565b80600260008282546128a99190613069565b90915550506001600160a01b038216600090815260208190526040812080548392906128d6908490613069565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36113bb600083836121c7565b6000610b698284613069565b82546000908190801561297f578561294d6001836130a3565b8154811061295d5761295d61311b565b60009182526020909120015464010000000090046001600160e01b0316612982565b60005b6001600160e01b0316925061299b83858763ffffffff16565b91506000811180156129d9575043866129b56001846130a3565b815481106129c5576129c561311b565b60009182526020909120015463ffffffff16145b15612a39576129e782612c1a565b866129f36001846130a3565b81548110612a0357612a0361311b565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b03160217905550612aa4565b856040518060400160405280612a4e43611e10565b63ffffffff168152602001612a6285612c1a565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b6000610b6982846130a3565b6001600160a01b038216612b195760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610885565b612b2582600083612084565b6001600160a01b03821660009081526020819052604090205481811015612b995760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610885565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612bc89084906130a3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361107c836000846121c7565b60006001600160e01b03821115611e755760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610885565b80356001600160a01b0381168114612c9a57600080fd5b919050565b803560ff81168114612c9a57600080fd5b600060208284031215612cc257600080fd5b610b6982612c83565b60008060408385031215612cde57600080fd5b612ce783612c83565b9150612cf560208401612c83565b90509250929050565b600080600060608486031215612d1357600080fd5b612d1c84612c83565b9250612d2a60208501612c83565b9150604084013590509250925092565b600080600080600080600060e0888a031215612d5557600080fd5b612d5e88612c83565b9650612d6c60208901612c83565b95506040880135945060608801359350612d8860808901612c9f565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612db757600080fd5b612dc083612c83565b946020939093013593505050565b600080600060608486031215612de357600080fd5b612dec84612c83565b95602085013595506040909401359392505050565b60008060008060008060c08789031215612e1a57600080fd5b612e2387612c83565b95506020870135945060408701359350612e3f60608801612c9f565b92506080870135915060a087013590509295509295509295565b60008060408385031215612e6c57600080fd5b612e7583612c83565b9150602083013563ffffffff81168114612e8e57600080fd5b809150509250929050565b600060208284031215612eab57600080fd5b81518015158114610b6957600080fd5b600060208284031215612ecd57600080fd5b5035919050565b600060208284031215612ee657600080fd5b5051919050565b600080600060608486031215612f0257600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115612f2857600080fd5b818601915086601f830112612f3c57600080fd5b813581811115612f4e57612f4e613131565b604051601f8201601f19908116603f01168101908382118183101715612f7657612f76613131565b81604052828152896020848701011115612f8f57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6001600160a01b03929092168252805460208301526001810154604083015260020154606082015260800190565b600060208083528351808285015260005b8181101561300c57858101830151858201604001528201612ff0565b8181111561301e576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561307c5761307c6130ef565b500190565b60008261309e57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156130b5576130b56130ef565b500390565b600181811c908216806130ce57607f821691505b6020821081141561207457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe52cd33bfcaef1b1998163985f60162407a7ba572f611529d9730d1f7c3825176a264697066735822122062add87476d1eaf6c97abfa0adb8f2a81c52cd76a46805fb8dd10c2dd762c8cb64736f6c63430008060033",
  "libraries": {
    "Utils": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "checkpoints(address,uint32)": {
        "details": "Get the `pos`-th checkpoint for `account`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "details": "Delegate votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`"
      },
      "delegates(address)": {
        "details": "Get the address `account` is currently delegating to."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
      },
      "getPastVotes(address,uint256)": {
        "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
      },
      "getVotes(address)": {
        "details": "Gets the current votes balance for `account`"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "numCheckpoints(address)": {
        "details": "Get number of checkpoints for `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3126,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3132,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3134,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3136,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3138,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4428,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)4935_storage)"
      },
      {
        "astId": 3757,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_delegates",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3763,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)3748_storage)dyn_storage)"
      },
      {
        "astId": 3767,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Checkpoint)3748_storage)dyn_storage"
      },
      {
        "astId": 387,
        "contract": "contracts/sRel.sol:sRel",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7611,
        "contract": "contracts/sRel.sol:sRel",
        "label": "vestAdmin",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7614,
        "contract": "contracts/sRel.sol:sRel",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7624,
        "contract": "contracts/sRel.sol:sRel",
        "label": "vestNonce",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7629,
        "contract": "contracts/sRel.sol:sRel",
        "label": "unlocks",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Unlock)6895_storage)"
      },
      {
        "astId": 7634,
        "contract": "contracts/sRel.sol:sRel",
        "label": "vest",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(Vest)6890_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint)3748_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)3748_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20Votes.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Checkpoint)3748_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Checkpoint)3748_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)4935_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)4935_storage"
      },
      "t_mapping(t_address,t_struct(Unlock)6895_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Utils.Unlock)",
        "numberOfBytes": "32",
        "value": "t_struct(Unlock)6895_storage"
      },
      "t_mapping(t_address,t_struct(Vest)6890_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Utils.Vest)",
        "numberOfBytes": "32",
        "value": "t_struct(Vest)6890_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)3748_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Votes.Checkpoint",
        "members": [
          {
            "astId": 3745,
            "contract": "contracts/sRel.sol:sRel",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3747,
            "contract": "contracts/sRel.sol:sRel",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4935_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4934,
            "contract": "contracts/sRel.sol:sRel",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Unlock)6895_storage": {
        "encoding": "inplace",
        "label": "struct Utils.Unlock",
        "members": [
          {
            "astId": 6892,
            "contract": "contracts/sRel.sol:sRel",
            "label": "unlockAmnt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6894,
            "contract": "contracts/sRel.sol:sRel",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vest)6890_storage": {
        "encoding": "inplace",
        "label": "struct Utils.Vest",
        "members": [
          {
            "astId": 6885,
            "contract": "contracts/sRel.sol:sRel",
            "label": "shortAmnt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6887,
            "contract": "contracts/sRel.sol:sRel",
            "label": "longAmnt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6889,
            "contract": "contracts/sRel.sol:sRel",
            "label": "lastUpdate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}